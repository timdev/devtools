#!/usr/bin/env php
<?php

function getProjectDir()
{
    $dir = dirname(realpath(__DIR__));
    while ($dir !== '/'){
        $dir = dirname($dir);
        if (file_exists("{$dir}/composer.json")){
            return $dir;
        }
    }

    throw new \RuntimeException("Couldn't locate project directory. No composer.json file in any parent directory!");
}

function safeLink($target, $link)
{
    // If local file differs from devtools version, back up local version and inform user.
    if (file_exists($link) && sha1_file($link) !== sha1_file($target)){
        $bn = basename($link);
        echo "WARNING: Moving your local $bn to $bn.bak" . PHP_EOL;
        rename($link, "$link.bak");
    }

    if (! file_exists($link)){
        echo "Linking $link => $target\n";
        copy($target, $link);
        chmod($link, 0444);
    }
}

function ensureComposerScripts($composerPath)
{
    echo "Backing up your composer.json (to composer.json.bak)\n";
    copy($composerPath, "$composerPath.bak");
    echo "Ensuring composer scripts are configured (modifying your composer.json)\n";

    $json = file_get_contents($composerPath);
    $data = json_decode($json, true);


    $data['scripts'] = array_merge(
        $data['scripts'] ?? [],
        [
            'cs' => 'phpcs',
            'cs:fix' => 'phpcbf',
            'test' => 'phpunit --testdox --color=always',
            'coverage' => 'XDEBUG_MODE=coverage phpunit --coverage-text --colors=always',
            'coverage:html' => 'XDEBUG_MODE=coverage phpunit --coverage-html build/coverage'
        ]
    );

    $json = json_encode($data, JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
    file_put_contents($composerPath, $json);
}


// save this for later:
$oldCwd = getcwd();

// figure out paths for "here", and the project containing this lib.
$libDir = dirname(__DIR__);    // root of this repo.
$projectDir = getProjectDir();      // root of project that includes this package.



chdir($projectDir);

safeLink("$libDir/src/TimDev/ruleset.xml", "$projectDir/phpcs.xml.dist");
safeLink("$libDir/src/phpunit.xml.dist", "$projectDir/phpunit.xml.dist");
safeLink("$libDir/src/psalm.xml.dist", "$projectDir/psalm.xml.dist");

$baselineFilename= "psalm-baseline.xml";
if (!file_exists("$projectDir/$baselineFilename")){
    echo "Installing empty $baselineFilename\n";
    copy("$libDir/src/$baselineFilename", "$projectDir/$baselineFilename");
}


ensureComposerScripts("$projectDir/composer.json");
