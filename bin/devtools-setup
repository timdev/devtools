#!/usr/bin/env php
<?php

function getProjectDir()
{
    $dir = dirname(realpath(__DIR__));
    while ($dir !== '/') {
        $dir = dirname($dir);
        if (file_exists("{$dir}/composer.json")) {
            return $dir;
        }
    }

    throw new \RuntimeException("Couldn't locate project directory. No composer.json file in any parent directory!");
}

function ensureComposerScripts($composerPath)
{
    echo "Backing up your composer.json (to composer.json.bak)\n";
    copy($composerPath, "$composerPath.bak");
    echo "Ensuring composer scripts are configured (modifying your composer.json)\n";

    $json = file_get_contents($composerPath);
    $data = json_decode($json, true);


    $data['scripts'] = array_merge(
        $data['scripts'] ?? [],
        [
            'dev:analyze' => ['@dev:analyze:psalm', '@dev:analyze:phpstan'],
            'dev:analyze:psalm' => 'psalm',
            'dev:analyze:phpstan' => 'phpstan',
            'dev:coverage' => 'XDEBUG_MODE=coverage phpunit --coverage-text --colors=always',
            'dev:coverage:html' => 'XDEBUG_MODE=coverage phpunit --coverage-html build/coverage && echo \'\nCoverage Report: build/coverage/index.html\'',
            'dev:cs' => 'phpcs',
            'dev:cs:fix' => 'phpcbf',
            'dev:qa' => [
                '@dev:analyze',
                '@dev:test',
                '@dev:cs'
            ],
            'dev:test' => 'phpunit --testdox --color=always',
            'dev' => '@dev:qa'
        ]
    );

    $data['scripts-descriptions'] = array_merge(
        $data['scripts-descriptions'] ?? [],
        [
            'dev:analyze' => 'Run static analysis with both psalm + phpstan.',
            'dev:analyze:psalm' => 'Run static analysis with psalm.',
            'dev:analyze:phpstan' => 'Run static analysis with phpstan.',
            'dev:coverage' => 'Report unit test coverage with output in the terminal.',
            'dev:coverage:html' => 'Generate unit test coverage report.',
            'dev:cs' => 'Run code style checks.',
            'dev:cs:fix' => 'Fix code style violations.',
            'dev:qa' => 'Run all quality checks (tests, static analysis, and coding standard).',
            'dev:test' => 'Run unit tests.',
            'dev' => 'Shortcut for dev:qa.'
        ]
    );

    $json = json_encode($data, JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
    file_put_contents($composerPath, $json);
}

function copyConfig($target, $link): void
{
    // If local file differs from devtools version, back up local version and inform user.
    if (file_exists($link) && sha1_file($link) !== sha1_file($target)) {
        $bn = basename($link);
        echo "WARNING: Moving your existing $bn to $bn.bak" . PHP_EOL;
        rename($link, "$link.bak");
    }

    if (!file_exists($link)) {
        echo "Linking $link => $target\n";
        copy($target, $link);
        chmod($link, 0444);
    }
}

// assume we'll be successful.
$rc = 0;

// save this for later:
$oldCwd = getcwd();

try {
    // figure out paths for "here", and the project containing this lib.
    $libDir = dirname(__DIR__);    // root of this repo.
    $projectDir = getProjectDir();      // root of project that includes this package.

    chdir($projectDir);

    copyConfig("$libDir/tooling-config/phpcs.xml.dist", "$projectDir/phpcs.xml.dist");
    copyConfig("$libDir/tooling-config/phpunit.xml.dist", "$projectDir/phpunit.xml.dist");
    copyConfig("$libDir/tooling-config/psalm.xml.dist", "$projectDir/psalm.xml.dist");
    copyConfig("$libDir/tooling-config/phpstan.dist.neon", "$projectDir/phpstan.dist.neon");
    copyConfig("$libDir/tooling-config/captainhook.json", "$projectDir/captainhook.json");

    $ghDir = "$projectDir/.github/workflows";
    if (! is_dir($ghDir)){
        if (!mkdir("$projectDir/.github/workflows", 0775, true)
            && !is_dir("$projectDir/.github/workflows")) {
            throw new \RuntimeException(sprintf('Directory "%s" was not created', "$projectDir/.github/workflows"));
        }
    }

    copyConfig("$libDir/tooling-config/github/workflows/ci.yml", "$projectDir/.github/workflows/ci.yml");

    $baselineFilename = "psalm-baseline.xml";
    if (!file_exists("$projectDir/$baselineFilename")) {
        echo "Installing empty $baselineFilename\n";
        copy("$libDir/tooling-config/$baselineFilename", "$projectDir/$baselineFilename");
    }

    ensureComposerScripts("$projectDir/composer.json");

    echo "Ensuring git hooks are installed ... \n";
    passthru("vendor/bin/captainhook install -n");
    echo "Done.\n";
} catch (\Throwable $e) {
    echo "ERROR: {$e->getMessage()}";
    echo $e->getTraceAsString();
    $rc = 1;
} finally {
    chdir($oldCwd);
}
exit($rc);

